{"description": "Write a function to convert the given set into ordered tuples.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains 5 integers, one per line", "output_spec": "Print the result as space-separated integers", "notes": "This problem is based on implementing the set_to_tuple function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["1\n2\n3\n4\n5", "6\n7\n8\n9\n10\n11", "12\n13\n14\n15\n16"], "sample_outputs": ["1 2 3 4 5", "6 7 8 9 10 11", "12 13 14 15 16"], "tags": ["data structures"], "src_uid": "mbpp_341", "difficulty": 300}
{"description": "Write a function to count bidirectional tuple pairs.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains 6 pairs of integers, each pair separated by a space on a separate line", "output_spec": "Print the result as a single integer", "notes": "This problem is based on implementing the count_bidirectional function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["5 6\n1 2\n6 5\n9 1\n6 5\n2 1", "5 6\n1 3\n6 5\n9 1\n6 5\n2 1", "5 6\n1 2\n6 5\n9 2\n6 5\n2 1"], "sample_outputs": ["3", "2", "4"], "tags": ["counting", "data structures"], "src_uid": "mbpp_438", "difficulty": 300}
{"description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The first line of the input contains n integers separated by spaces, the second line contains a single integer n, the third line contains a single integer index, the last line contains a single integer k", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the max_sum_increasing_subseq function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["1 101 2 3 100 4 5\n7\n4\n6", "1 101 2 3 100 4 5\n7\n2\n5", "11 15 19 21 26 28 31\n7\n2\n4"], "sample_outputs": ["11", "7", "71"], "tags": ["implementation"], "src_uid": "mbpp_306", "difficulty": 300}
{"description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains 3 lines. The first line contains the array of integers separated by spaces, the second line is the number N, the third line is a single integer P", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the modular_inverse function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["1 6 4 5\n4\n7", "1 3 8 12 12\n5\n13", "2 3 4 5\n4\n6"], "sample_outputs": ["2", "3", "1"], "tags": ["counting", "arrays", "math"], "src_uid": "mbpp_288", "difficulty": 300}
{"description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains two lines, where each line is a tuple of 3 integers separated by spaces", "output_spec": "Print the result as space-separated integers", "notes": "This problem is based on implementing the substract_elements function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["10 4 5\n2 5 18", "11 2 3\n24 45 16", "7 18 9\n10 11 12"], "sample_outputs": ["8 -1 -13", "-13 -43 -13", "-3 7 -3"], "tags": ["data structures"], "src_uid": "mbpp_273", "difficulty": 300}
{"description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains a string of brackets which may not be balanced", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the swap_count function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["[]][][", "[[][]]", "[[][]]]["], "sample_outputs": ["2", "0", "1"], "tags": ["strings", "greedy"], "src_uid": "mbpp_386", "difficulty": 300}
{"description": "Write a function to find the first maximum length of even word.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains a string of words separated by spaces", "output_spec": "Print the result word that is the first maximum length of even word, or -1 if there is no even word", "notes": "This problem is based on implementing the find_Max_Len_Even function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["python language", "maximum even length", "eve"], "sample_outputs": ["language", "length", "-1"], "tags": ["implementation"], "src_uid": "mbpp_315", "difficulty": 300}
{"description": "Write a function to count hexadecimal numbers for a given range.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains 2 values separated by spaces", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the count_Hexadecimal function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["10 15", "2 4", "15 16"], "sample_outputs": ["6", "0", "1"], "tags": ["counting", "math"], "src_uid": "mbpp_107", "difficulty": 300}
{"description": "Write a function to check the given decimal with a precision of 2 by using regex.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains a string", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the is_decimal function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["123.11", "0.21", "123.1214"], "sample_outputs": ["True", "True", "False"], "tags": ["strings"], "src_uid": "mbpp_208", "difficulty": 300}
{"description": "Write a function to find the sum of absolute differences in all pairs of the given array.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The input contains n+1 integers, one per line (first n values are the array, last value is the array length)", "output_spec": "Print the result as an integer", "notes": "This problem is based on implementing the sum_Pairs function. The program should read input from stdin and print the result to stdout.", "sample_inputs": ["1\n8\n9\n15\n16\n5", "1\n2\n3\n4\n4", "1\n2\n3\n4\n5\n7\n9\n11\n14\n9"], "sample_outputs": ["74", "10", "188"], "tags": ["arrays"], "src_uid": "mbpp_144", "difficulty": 300}
{"description": "Young Teodor enjoys drawing. His favourite hobby is drawing segments with integer borders inside his huge [1;m] segment. One day Teodor noticed that picture he just drawn has one interesting feature: there doesn't exist an integer point, that belongs each of segments in the picture. Having discovered this fact, Teodor decided to share it with Sasha.Sasha knows that Teodor likes to show off so he never trusts him. Teodor wants to prove that he can be trusted sometimes, so he decided to convince Sasha that there is no such integer point in his picture, which belongs to each segment. However Teodor is lazy person and neither wills to tell Sasha all coordinates of segments' ends nor wills to tell him their amount, so he suggested Sasha to ask him series of questions 'Given the integer point xi, how many segments in Fedya's picture contain that point?', promising to tell correct answers for this questions.Both boys are very busy studying and don't have much time, so they ask you to find out how many questions can Sasha ask Teodor, that having only answers on his questions, Sasha can't be sure that Teodor isn't lying to him. Note that Sasha doesn't know amount of segments in Teodor's picture. Sure, Sasha is smart person and never asks about same point twice.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "First line of input contains two integer numbers: n and m (1 ≤ n, m ≤ 100 000) — amount of segments of Teodor's picture and maximal coordinate of point that Sasha can ask about. ith of next n lines contains two integer numbers li and ri (1 ≤ li ≤ ri ≤ m) — left and right ends of ith segment in the picture. Note that that left and right ends of segment can be the same point. It is guaranteed that there is no integer point, that belongs to all segments.", "output_spec": "Single line of output should contain one integer number k – size of largest set (xi, cnt(xi)) where all xi are different, 1 ≤ xi ≤ m, and cnt(xi) is amount of segments, containing point with coordinate xi, such that one can't be sure that there doesn't exist point, belonging to all of segments in initial picture, if he knows only this set(and doesn't know n).", "notes": "NoteFirst example shows situation where Sasha can never be sure that Teodor isn't lying to him, because even if one knows cnt(xi) for each point in segment [1;4], he can't distinguish this case from situation Teodor has drawn whole [1;4] segment.In second example Sasha can ask about 5 points e.g. 1, 2, 3, 5, 6, still not being sure if Teodor haven't lied to him. But once he knows information about all points in [1;6] segment, Sasha can be sure that Teodor haven't lied to him.", "sample_inputs": ["2 4\n1 2\n3 4", "4 6\n1 3\n2 3\n4 6\n5 6"], "sample_outputs": ["4", "5"], "tags": ["data structures", "dp", "binary search"], "src_uid": "ce8350be138ce2061349d7f9224a5aaf", "difficulty": 1900}
{"description": "Captain Bill the Hummingbird and his crew recieved an interesting challenge offer. Some stranger gave them a map, potion of teleportation and said that only this potion might help them to reach the treasure. Bottle with potion has two values x and y written on it. These values define four moves which can be performed using the potion:         Map shows that the position of Captain Bill the Hummingbird is (x1, y1) and the position of the treasure is (x2, y2).You task is to tell Captain Bill the Hummingbird whether he should accept this challenge or decline. If it is possible for Captain to reach the treasure using the potion then output \"YES\", otherwise \"NO\" (without quotes).The potion can be used infinite amount of times.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The first line contains four integer numbers x1, y1, x2, y2 ( - 105 ≤ x1, y1, x2, y2 ≤ 105) — positions of Captain Bill the Hummingbird and treasure respectively. The second line contains two integer numbers x, y (1 ≤ x, y ≤ 105) — values on the potion bottle.", "output_spec": "Print \"YES\" if it is possible for Captain to reach the treasure using the potion, otherwise print \"NO\" (without quotes).", "notes": "NoteIn the first example there exists such sequence of moves:   — the first type of move   — the third type of move ", "sample_inputs": ["0 0 0 6\n2 3", "1 1 3 6\n1 5"], "sample_outputs": ["YES", "NO"], "tags": ["math", "number theory", "implementation"], "src_uid": "1c80040104e06c9f24abfcfe654a851f", "difficulty": 1200}
{"description": "Pak Chanek plans to build a garage. He wants the garage to consist of a square and a right triangle that are arranged like the following illustration.  Define $$$a$$$ and $$$b$$$ as the lengths of two of the sides in the right triangle as shown in the illustration. An integer $$$x$$$ is suitable if and only if we can construct a garage with assigning positive integer values for the lengths $$$a$$$ and $$$b$$$ ($$$a&lt;b$$$) so that the area of the square at the bottom is exactly $$$x$$$. As a good friend of Pak Chanek, you are asked to help him find the $$$N$$$-th smallest suitable number.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "128 megabytes", "input_spec": "The only line contains a single integer $$$N$$$ ($$$1 \\leq N \\leq 10^9$$$).", "output_spec": "An integer that represents the $$$N$$$-th smallest suitable number.", "notes": "NoteThe $$$3$$$-rd smallest suitable number is $$$7$$$. A square area of $$$7$$$ can be obtained by assigning $$$a=3$$$ and $$$b=4$$$.", "sample_inputs": ["3"], "sample_outputs": ["7"], "tags": ["geometry", "math", "binary search"], "src_uid": "d0a8604b78ba19ab769fd1ec90a72e4e", "difficulty": 1500}
{"description": "Little Petya loves training spiders. Petya has a board n × m in size. Each cell of the board initially has a spider sitting on it. After one second Petya chooses a certain action for each spider, and all of them humbly perform its commands. There are 5 possible commands: to stay idle or to move from current cell to some of the four side-neighboring cells (that is, one command for each of the four possible directions). Petya gives the commands so that no spider leaves the field. It is allowed for spiders to pass through each other when they crawl towards each other in opposite directions. All spiders crawl simultaneously and several spiders may end up in one cell. Petya wants to know the maximum possible number of spider-free cells after one second.", "input_from": "standard input", "output_to": "standard output", "time_limit": 2.0, "memory_limit": "256 megabytes", "input_spec": "The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 40, n·m ≤ 40) — the board sizes.", "output_spec": "In the first line print the maximum number of cells without spiders.", "notes": "NoteIn the first sample the only possible answer is:sIn the second sample one of the possible solutions is: rdlruls denotes command \"stay idle\", l, r, d, u denote commands \"crawl left\", \"crawl right\", \"crawl down\", \"crawl up\", correspondingly.", "sample_inputs": ["1 1", "2 3"], "sample_outputs": ["0", "4"], "tags": ["bitmasks", "dp", "dsu"], "src_uid": "097674b4dd696b30e102938f71dd39b9", "difficulty": 2100}
{"description": "Let's assume that set S consists of m distinct intervals [l1, r1], [l2, r2], ..., [lm, rm] (1 ≤ li ≤ ri ≤ n; li, ri are integers).Let's assume that f(S) is the maximum number of intervals that you can choose from the set S, such that every two of them do not intersect. We assume that two intervals, [l1, r1] and [l2, r2], intersect if there is an integer x, which meets two inequalities: l1 ≤ x ≤ r1 and l2 ≤ x ≤ r2.Sereja wonders, how many sets S are there, such that f(S) = k? Count this number modulo 1000000007 (109 + 7).", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.5, "memory_limit": "256 megabytes", "input_spec": "The first line contains integers n, k (1 ≤ n ≤ 500; 0 ≤ k ≤ 500).", "output_spec": "In a single line, print the answer to the problem modulo 1000000007 (109 + 7).", "notes": null, "sample_inputs": ["3 1", "3 2", "2 0", "2 2"], "sample_outputs": ["23", "32", "1", "2"], "tags": ["dp"], "src_uid": "111673158df2e37ac6c019bb99225ccb", "difficulty": 2500}
{"description": "Vasya has recently learned to type and log on to the Internet. He immediately entered a chat room and decided to say hello to everybody. Vasya typed the word s. It is considered that Vasya managed to say hello if several letters can be deleted from the typed word so that it resulted in the word \"hello\". For example, if Vasya types the word \"ahhellllloou\", it will be considered that he said hello, and if he types \"hlelo\", it will be considered that Vasya got misunderstood and he didn't manage to say hello. Determine whether Vasya managed to say hello by the given word s.", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The first and only line contains the word s, which Vasya typed. This word consisits of small Latin letters, its length is no less that 1 and no more than 100 letters.", "output_spec": "If Vasya managed to say hello, print \"YES\", otherwise print \"NO\".", "notes": null, "sample_inputs": ["ahhellllloou", "hlelo"], "sample_outputs": ["YES", "NO"], "tags": ["strings", "greedy"], "src_uid": "c5d19dc8f2478ee8d9cba8cc2e4cd838", "difficulty": 1000}
{"description": "Hongcow is learning to spell! One day, his teacher gives him a word that he needs to learn to spell. Being a dutiful student, he immediately learns how to spell the word.Hongcow has decided to try to make new words from this one. He starts by taking the word he just learned how to spell, and moves the last character of the word to the beginning of the word. He calls this a cyclic shift. He can apply cyclic shift many times. For example, consecutively applying cyclic shift operation to the word \"abracadabra\" Hongcow will get words \"aabracadabr\", \"raabracadab\" and so on.Hongcow is now wondering how many distinct words he can generate by doing the cyclic shift arbitrarily many times. The initial string is also counted.", "input_from": "standard input", "output_to": "standard output", "time_limit": 2.0, "memory_limit": "256 megabytes", "input_spec": "The first line of input will be a single string s (1 ≤ |s| ≤ 50), the word Hongcow initially learns how to spell. The string s consists only of lowercase English letters ('a'–'z').", "output_spec": "Output a single integer equal to the number of distinct strings that Hongcow can obtain by applying the cyclic shift arbitrarily many times to the given string.", "notes": "NoteFor the first sample, the strings Hongcow can generate are \"abcd\", \"dabc\", \"cdab\", and \"bcda\".For the second sample, no matter how many times Hongcow does the cyclic shift, Hongcow can only generate \"bbb\".For the third sample, the two strings Hongcow can generate are \"yzyz\" and \"zyzy\".", "sample_inputs": ["abcd", "bbb", "yzyz"], "sample_outputs": ["4", "1", "2"], "tags": ["strings", "implementation"], "src_uid": "8909ac99ed4ab2ee4d681ec864c7831e", "difficulty": 900}
{"description": "You can not just take the file and send it. When Polycarp trying to send a file in the social network \"Codehorses\", he encountered an unexpected problem. If the name of the file contains three or more \"x\" (lowercase Latin letters \"x\") in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed.Determine the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \"xxx\".You can delete characters in arbitrary positions (not necessarily consecutive). If you delete a character, then the length of a string is reduced by $$$1$$$. For example, if you delete the character in the position $$$2$$$ from the string \"exxxii\", then the resulting string is \"exxii\".", "input_from": "standard input", "output_to": "standard output", "time_limit": 1.0, "memory_limit": "256 megabytes", "input_spec": "The first line contains integer $$$n$$$ $$$(3 \\le n \\le 100)$$$ — the length of the file name. The second line contains a string of length $$$n$$$ consisting of lowercase Latin letters only — the file name.", "output_spec": "Print the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. If initially the file name dost not contain a forbidden substring \"xxx\", print 0.", "notes": "NoteIn the first example Polycarp tried to send a file with name contains number $$$33$$$, written in Roman numerals. But he can not just send the file, because it name contains three letters \"x\" in a row. To send the file he needs to remove any one of this letters.", "sample_inputs": ["6\nxxxiii", "5\nxxoxx", "10\nxxxxxxxxxx"], "sample_outputs": ["1", "0", "8"], "tags": ["strings", "greedy"], "src_uid": "8de14db41d0acee116bd5d8079cb2b02", "difficulty": 800}
{"description": "Little Johnny Bubbles enjoys spending hours in front of his computer playing video games. His favorite game is Bubble Strike, fast-paced bubble shooting online game for two players.Each game is set in one of the N maps, each having different terrain configuration. First phase of each game decides on which map the game will be played. The game system randomly selects three maps and shows them to the players. Each player must pick one of those three maps to be discarded. The game system then randomly selects one of the maps that were not picked by any of the players and starts the game.Johnny is deeply enthusiastic about the game and wants to spend some time studying maps, thus increasing chances to win games played on those maps. However, he also needs to do his homework, so he does not have time to study all the maps. That is why he asked himself the following question: \"What is the minimum number of maps I have to study, so that the probability to play one of those maps is at least $$$P$$$\"?Can you help Johnny find the answer for this question? You can assume Johnny's opponents do not know him, and they will randomly pick maps.", "input_from": "standard input", "output_to": "standard output", "time_limit": 0.5, "memory_limit": "256 megabytes", "input_spec": "The first line contains two integers $$$N$$$ ($$$3$$$ $$$\\leq$$$ $$$N$$$ $$$\\leq$$$ $$$10^{3}$$$) and $$$P$$$ ($$$0$$$ $$$\\leq$$$ $$$P$$$ $$$\\leq$$$ $$$1$$$) – total number of maps in the game and probability to play map Johnny has studied. $$$P$$$ will have at most four digits after the decimal point.", "output_spec": "Output contains one integer number – minimum number of maps Johnny has to study.", "notes": null, "sample_inputs": ["7 1.0000"], "sample_outputs": ["6"], "tags": ["combinatorics", "binary search", "ternary search", "probabilities", "math"], "src_uid": "788ed59a964264bd0e755e155a37e14d", "difficulty": 2000}
{"description": "Hasan loves playing games and has recently discovered a game called TopScore. In this soccer-like game there are $$$p$$$ players doing penalty shoot-outs. Winner is the one who scores the most. In case of ties, one of the top-scorers will be declared as the winner randomly with equal probability.They have just finished the game and now are waiting for the result. But there's a tiny problem! The judges have lost the paper of scores! Fortunately they have calculated sum of the scores before they get lost and also for some of the players they have remembered a lower bound on how much they scored. However, the information about the bounds is private, so Hasan only got to know his bound.According to the available data, he knows that his score is at least $$$r$$$ and sum of the scores is $$$s$$$.Thus the final state of the game can be represented in form of sequence of $$$p$$$ integers $$$a_1, a_2, \\dots, a_p$$$ ($$$0 \\le a_i$$$) — player's scores. Hasan is player number $$$1$$$, so $$$a_1 \\ge r$$$. Also $$$a_1 + a_2 + \\dots + a_p = s$$$. Two states are considered different if there exists some position $$$i$$$ such that the value of $$$a_i$$$ differs in these states. Once again, Hasan doesn't know the exact scores (he doesn't know his exact score as well). So he considers each of the final states to be equally probable to achieve.Help Hasan find the probability of him winning.It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$, $$$P \\le Q$$$. Report the value of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.", "input_from": "standard input", "output_to": "standard output", "time_limit": 3.0, "memory_limit": "256 megabytes", "input_spec": "The only line contains three integers $$$p$$$, $$$s$$$ and $$$r$$$ ($$$1 \\le p \\le 100$$$, $$$0 \\le r \\le s \\le 5000$$$) — the number of players, the sum of scores of all players and Hasan's score, respectively.", "output_spec": "Print a single integer — the probability of Hasan winning. It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$, $$$P \\le Q$$$. Report the value of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.", "notes": "NoteIn the first example Hasan can score $$$3$$$, $$$4$$$, $$$5$$$ or $$$6$$$ goals. If he scores $$$4$$$ goals or more than he scores strictly more than his only opponent. If he scores $$$3$$$ then his opponent also scores $$$3$$$ and Hasan has a probability of $$$\\frac 1 2$$$ to win the game. Thus, overall he has the probability of $$$\\frac 7 8$$$ to win.In the second example even Hasan's lower bound on goal implies him scoring more than any of his opponents. Thus, the resulting probability is $$$1$$$.", "sample_inputs": ["2 6 3", "5 20 11", "10 30 10"], "sample_outputs": ["124780545", "1", "85932500"], "tags": ["math", "probabilities", "combinatorics", "dp"], "src_uid": "609195ef4a970c62a8210dafe118580e", "difficulty": 2500}